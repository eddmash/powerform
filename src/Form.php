<?php

namespace Eddmash\PowerOrm\Form;

use Eddmash\PowerOrm\BaseObject;
use Eddmash\PowerOrm\ContributorInterface;
use Eddmash\PowerOrm\Exception\FormNotReadyException;
use Eddmash\PowerOrm\Exception\KeyError;
use Eddmash\PowerOrm\Form\Exception\ValidationError;
use Eddmash\PowerOrm\Form\Fields\Field;
use Eddmash\PowerOrm\Helpers\ArrayHelper;

/**
 * Class Form.
 *
 * @since 1.0.0
 *
 * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
 */
abstract class Form extends BaseObject implements \IteratorAggregate
{
    use FormFieldTrait;
    const nonFieldErrors = '_all_';

    /**
     * Indicates if the form is ready for use, if false, this indicates the form is in customization mode and cannot
     * be used for things like validation.using it when not ready causes inconsistencies in how the form works.
     *
     * Call done() to signal your done customizing the form
     *
     * @var bool
     */
    protected $ready = false;

    /**
     * By default, the form rendering methods include:
     *      - HTML id attributes on the form elements.
     *      - The corresponding <label> tags around the labels. An HTML <label> tag designates which label text is
     *          associated with which form element.
     *          This small enhancement makes forms more usable and more accessible to assistive devices.
     *          It’s always a good idea to use <label> tags.
     *
     * The id attribute values are generated by prepending id_ to the form field names. This behavior is configurable,
     * though, if you want to change the id convention or remove HTML id attributes and <label> tags entirely.
     *
     * Use the auto_id argument to the Form constructor to control the id and label behavior.
     *
     * This argument must be True, False or a string.
     *      - If auto_id is False, then the form output will not include <label> tags nor id attributes
     *      - If auto_id is set to True, then the form output will include <label> tags and will simply use the
     *          field name as its id for each form field.
     *      - If auto_id is set to a string containing the format character '%s', then the form output will include
     *          <label> tags, and will generate id attributes based on the format string. For example,
     *          for a format string 'field_%s', a field named subject will get the id value 'field_subject'.
     *      - If auto_id is set to any other true value – such as a string that doesn’t include %s – then the library
     *          will act as if auto_id is True.
     *
     * By default, auto_id is set to the string 'id_%s'.
     *
     * @var string
     */
    public $auto_id = 'id_%s';
    public $initial = [];
    public $data = [];
    public $isBound = false;

    /**
     * @var Field[]
     */
    protected $fieldsCache = [];
    public $validation_rules = [];
    public $cleanedData = [];

    /**
     * Takes three arguments.
     *
     * @param array $data the data to bind the form to and validate against, usually you will use data from the $_POST
     *                       but can be an associative array that has any of the form fields names as keys
     * @param array $initial this is the are initial values for the form fields usually the first time the form is
     *                       loaded i.e. unbound form, this should be an associative array where keys are the form fields names
     *
     * You may be thinking, why not just pass a dictionary of the initial values as data when displaying the form?
     * Well, if you do that, you’ll trigger validation, and the HTML output will include any validation errors.
     *
     * This is why initial values are only displayed for unbound forms. For bound forms, the HTML output will use
     * the bound data.
     *
     * Also note that initial values are not used as “fallback” data in validation if a particular field’s value is
     * not given. initial values are only intended for initial form display:
     *
     * <strong>NOTE </strong> this are not default values
     * @param array $kwargs this accepts any other arguments that need to be passed to the form, usually
     *                      this used to accept user defined arguments
     */
    public function __construct($data = [], $initial = [], $kwargs = [])
    {
        if (!empty($data)):
            $this->isBound = true;
        endif;

        $this->data = $data;

        if (empty($initial)):
            $initial = [];
        endif;

        $this->initial = array_change_key_case($initial, CASE_LOWER);

        // replace the default options with the ones passed in.
        foreach ($kwargs as $key => $value) :
            $this->{$key} = $value;
        endforeach;

        $this->init();
    }

    /**
     * Initializes the object.
     * This method is invoked at the end of the constructor after the object is initialized ;.
     */
    public function init()
    {
    }

    /**
     * Returns an array of fields to be attached to the form.
     * @return Field[]
     * @author: Eddilbert Macharia (http://eddmash.com)<edd.cowan@gmail.com>
     */
    public function fields()
    {
        return [];

    }

    public function setup()
    {
        $fields = $this->fields();
        // this sets the form fields to the form.
        foreach ($fields as $name => $field) :
            $this->addField($name, $field);
        endforeach;

        $this->ready = true;
    }

    /**
     * Returns true if the form is bound and its has no errors after validation has been run.
     *
     * @return bool
     *
     * @since 1.1.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    public function isValid()
    {
        $this->_isReady(__METHOD__);

        return $this->isBound && $this->_formHasErrors();
    }

    /**
     * return a list of errors related to the form and its fields.
     *
     * @return mixed
     *
     * @since 1.1.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    public function errors()
    {
        if (empty($this->_errors)):
            $this->fullClean();
        endif;

        return $this->_errors;
    }

    /**
     * Raise error if form is not ready for use.
     *
     * @param $method
     *
     * @throws FormNotReadyException
     *
     * @since 1.1.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    protected function _isReady($method)
    {
        if (!$this->ready):
            $this->setup();
        endif;
    }

    /**
     * Returns true of form is ready for use or false if its still in customizaiton mode.
     *
     * @return bool
     *
     * @since 1.1.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    public function isReady()
    {
        return $this->ready;
    }

    /**
     * Clean the form and the fields i.e. do the validations for this form and its fields.
     *
     * @since 1.1.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    public function fullClean()
    {
        $this->_errors = [];

        if (!$this->isBound):
            return;
        endif;

        $this->_cleanFields();
        $this->_cleanForm();
    }

    /**
     * Gets a single field instance in the form fields array and returns it.
     *
     * <h4>Usage</h4>
     *
     * if a form has a fields username, you get the field object:
     *
     * <pre><code>$form->getField('username);</code></pre>
     *
     * @param $field_name
     *
     * @return mixed
     *
     * @throws KeyError
     *
     * @since 1.0.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    public function getField($field_name)
    {
        if ((array_key_exists(strtolower($field_name), $this->fields))):
            return $this->fieldsCache[strtolower($field_name)];
        endif;

        throw new KeyError(sprintf('Field %1$s not found in %2$s', $field_name, static::class));
    }

    /**
     * used to set up field on the form, usually used by a fields contribute method.
     *
     * @param $field
     *
     * @since 1.1.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    public function loadField($field)
    {
        $this->fieldsCache[strtolower($field->name)] = $field;
    }

    public function clean()
    {
        return $this->cleanedData;
    }

    public function _addError($name, $error)
    {

        // for consistency convert them to a validation error object
        if (!$error instanceof ValidationError):
            $error = new ValidationError($error);
        endif;

        if (!$name):
            // todo store non field errors as arrays, current can only store one non field per form
            $name = self::nonFieldErrors;
        endif;

        $this->_errors[$name] = $error->getErrorList();
        if (array_key_exists($name, $this->cleanedData)) :
            unset($this->cleanedData[$name]);
        endif;

    }

    public function addField($name, $field)
    {
        $this->_fieldSetup($name, $field);
    }

    public function nonFieldErrors()
    {
        if (ArrayHelper::hasKey($this->errors(), self::nonFieldErrors)):
            return ArrayHelper::getValue($this->errors(), self::nonFieldErrors);
        endif;

        return [];
    }

    public function nonFieldErrorsAsHtml()
    {
        $errors = "";
        foreach ($this->nonFieldErrors() as $nonFieldError) :
            $errors .=sprintf("<li>%s</li>", $nonFieldError);
        endforeach;
        return $errors;
    }

    public function hidden_fields()
    {
        $hidden_fields = [];
        foreach ($this->fieldsCache as $name => $field) :
            if ($field->isHidden()):
                $hidden_fields[$name] = $field;
            endif;
        endforeach;

        return $hidden_fields;
    }

    public function visible_fields()
    {
        $visible_fields = [];
        foreach ($this->fieldsCache as $name => $field) :
            if (!$field->isHidden()):
                $visible_fields[$name] = $field;
            endif;
        endforeach;

        return $visible_fields;
    }

    /**
     * Returns this form rendered as HTML <li>s -- excluding the <ul></ul>.
     *
     * @return string
     *
     * @since 1.1.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    public function asUl()
    {
        return $this->getHtmlOutput(
            [
                'row' => '<li> %s %s %s</li>',
                'errors' => '<li>%s</li>',
                'helpText' => '<span class="helptext">%s</span>',
            ]
        );
    }

    /**
     * Returns this form rendered as HTML <p>s.
     *
     * @return string
     *
     * @since 1.1.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    public function asParagraph()
    {
        return $this->getHtmlOutput(
            [
                'row' => '<p> %s <br> %s <br> %s</p>',
                'errors' => '%s',
                'helpText' => '<span class="helptext">%s</span>',
            ]
        );
    }

    public function _cleanFields()
    {
        $this->cleanedData = array_diff_key($this->data, $this->_errors);

        foreach ($this->fieldsCache as $name => $field) :

            // if field has failed validation, no need to go on
            if (array_key_exists($name, $this->_errors)):
                continue;
            endif;

            if ($field->disabled):
                $value = array_key_exists($name, $this->initial) ? $this->initial[$name] : $field->initial;
            else:
                if (array_key_exists($name, $this->cleanedData)):

                    $value = $field->widget->valueFromDataCollection($this->cleanedData, $name);
                else:
                    $value = $field->data();
                endif;
            endif;

            try {
                // run default field validations
                $value = $field->clean($value);

                // just in case,  confirm the field has not field validation already
                if (!array_key_exists($name, $this->_errors)):
                    $this->cleanedData[$name] = $value;
                endif;

                // run custom validation by user
                $field_clean_method = sprintf('clean_%s', $name);
                if ($this->hasMethod($field_clean_method)):
                    $value = call_user_func([$this, $field_clean_method]);
                    $this->cleanedData[$name] = $value;
                endif;
            } catch (ValidationError $e) {
                $this->_addError($name, $e);

                if (array_key_exists($name, $this->cleanedData)):
                    unset($this->cleanedData[$name]);
                endif;
            }

        endforeach;
    }

    public function _cleanForm()
    {
        try {
            $cleanData = $this->clean();
        } catch (ValidationError $e) {
            $cleanData = null;
            $this->_addError(null, $e);
        }

        if ($cleanData):
            $this->cleanedData = $cleanData;
        endif;
    }

    public function _formHasErrors()
    {
        return empty($this->errors());
    }

    protected function _is_multipart()
    {
        if (empty($this->fieldsCache)):
            return false;
        endif;

        foreach ($this->fieldsCache as $field) :
            if ($field->widget->needs_multipart_form):
                return true;
            endif;
        endforeach;
    }

    /**
     * @return string
     *
     * @since 1.0.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    protected function getHtmlOutput($opts = [])
    {
        //todo display errros
        /* @var $field Field */
        $topErrors = $this->nonFieldErrors();
        $row = '';
        $errors = '';
        $helpText = '%s';
        extract($opts);

        $output = [];
        $hidden_output = [];

        foreach ($this->fieldsCache as $name => $field) :
            $fieldErrors = '';

            if ($field->getErrors()) :
                foreach ($field->getErrors() as $error) :
                    $fieldErrors .= implode(", ", $error->getMessages());
                endforeach;
            endif;

            if ($field->isHidden()):
                if ($fieldErrors) :
                    $topErrors[] = sprintf('(Hidden field (%s) :: %s', $name, $fieldErrors);
                endif;
                $hidden_output[] = $field->asWidget();
            else:
                if ($fieldErrors) :
                    $output[] = sprintf($errors, $fieldErrors);
                endif;
                $helpTextHtml = sprintf($helpText, $field->getHelpText());
                $output[] = sprintf($row, $field->labelTag(), $field->asWidget(), $helpTextHtml);
            endif;
        endforeach;

        // add errors to the top
        if ($topErrors) :
            array_unshift($output, sprintf($errors, implode(", ", $topErrors)));
        endif;

        // add hidden inputs to end
        $output = array_merge($output, $hidden_output);

        return implode(' ', $output);
    }

    protected function _fieldSetup($name, $value)
    {
        if ($value instanceof ContributorInterface):
            $value->contributeToClass($name, $this);
        else:
            $this->{$name} = $value;
        endif;
    }

    public function getIterator()
    {
        $this->setup();

        return new \ArrayIterator($this->fieldsCache);
    }

    /**
     * @ignore
     *
     * @param $field_name
     *
     * @return mixed
     *
     * @throws KeyError
     *
     * @since 1.0.0
     *
     * @author Eddilbert Macharia (http://eddmash.com) <edd.cowan@gmail.com>
     */
    public function __get($field_name)
    {
        $this->setup();
        if (array_key_exists($field_name, $this->fieldsCache)):
            return $this->getField($field_name);
        endif;
    }

    public function __set($name, $value)
    {
        $this->_fieldSetup($name, $value);
    }

    public function __toString()
    {
        $this->setup();

        return $this->asParagraph();
    }
}
